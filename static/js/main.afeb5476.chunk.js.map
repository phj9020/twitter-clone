{"version":3,"sources":["assets/twitterLogo.png","fbase.js","components/Tweet.js","components/TweetFactory.js","routes/Home.js","components/AuthForm.js","routes/Auth.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/GlobalStyle.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","Container","styled","div","BtnContainer","BtnTrash","button","BtnEdit","EditContainer","Tweet","tweetObj","isOwner","useState","editing","setEditing","text","newTweet","setNewTweet","console","log","toggleEditing","prev","onSubmit","event","preventDefault","collection","doc","id","update","type","value","placeholder","onChange","target","required","onClick","fileUrl","src","alt","window","confirm","delete","refFromURL","Form","form","ImagePreview","TweetFactory","userObj","tweet","setTweet","file","setFile","a","fileRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createdAt","Date","now","creatorId","add","maxLength","htmlFor","accept","theFile","files","reader","FileReader","onloadend","finishedevent","result","currentTarget","readAsDataURL","Content","LogoContainer","Logo","img","TweetList","Home","tweets","setTweets","useEffect","onSnapshot","snapshot","tweetsArray","docs","map","data","require","default","item","FormContainer","ErrorMessage","SwithBtn","span","AuthForm","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","name","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","minLength","autoComplete","SocialLogin","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faGoogle","faGithub","LogoutBtn","History","Profile","refreshUser","myTweets","setMyTweets","displayName","setDisplayName","history","useHistory","getMyTweet","where","get","mySaying","updateProfile","signOut","push","length","index","NavigationBar","NavUl","ul","NavLi","li","props","current","Slink","Link","withRouter","pathname","location","to","faHome","size","pull","faUser","MainRouter","isLoggedIn","exact","path","globalStyle","createGlobalStyle","reset","App","init","setInit","setIsLoggedIn","setUserObj","onAuthStateChanged","user","args","GlobalStyle","currentUser","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.afeb5476.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitterLogo.f963dcac.png\";","// Firebase App (the core Firebase SDK) is always required and must be listed first\r\nimport firebase from \"firebase/app\";\r\n// Add the Firebase products that you want to use\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\";\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUKCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGING_ID,\r\n    appId:process.env.REACT_APP_APP_ID\r\n  };\r\n  // Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n// instance from firebase module\r\nexport const firebaseInstance = firebase;\r\n\r\n// 서비스만 export \r\nexport const authService = firebase.auth();\r\n\r\nexport const dbService = firebase.firestore();\r\n\r\nexport const storageService = firebase.storage();","import React, { useState } from \"react\";\r\nimport { dbService, storageService } from \"fbase\";\r\nimport styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  height: 60px;\r\n  background-color: white;\r\n  margin-bottom: 40px;\r\n  color: black;\r\n  position: relative;\r\n  border-radius: 10px;\r\n\r\n  h4 {\r\n    width: 100%;\r\n    font-size: 20px;\r\n    display: flex;\r\n    align-items: center;\r\n    text-indent: 10px;\r\n  }\r\n  img {\r\n    position: absolute;\r\n    right: 0px;\r\n    bottom: -25px;\r\n    width: 50px;\r\n    height: 50px;\r\n    border-radius: 50%;\r\n  }\r\n\r\n`\r\n\r\nconst BtnContainer = styled.div`\r\n    position: relative;\r\n`\r\n\r\nconst BtnTrash = styled.button`\r\n    all: unset;\r\n    cursor:pointer;\r\n    font-size: 15px;\r\n    position:absolute;\r\n    right: 30px;\r\n    top: 10px;\r\n`\r\n\r\nconst BtnEdit = styled.button`\r\n    all: unset;\r\n    cursor:pointer;\r\n    font-size: 15px;\r\n    position:absolute;\r\n    right: 5px;\r\n    top: 10px;\r\n`\r\n\r\nconst EditContainer = styled.div`\r\n    display: flex;\r\n    width: 100%;\r\n    height: 200px;\r\n    background-color: white;\r\n    margin-bottom: 40px;\r\n    color: black;\r\n    border-radius: 10px;\r\n    flex-direction: column;\r\n    padding: 10px;\r\n\r\n  form {\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n\r\n  input{\r\n    all: unset;\r\n    width: 400px;\r\n    margin: 0px auto;\r\n  }\r\n  \r\n  input[type=text] {\r\n    height: 50px;\r\n    margin: 10px;\r\n    border: 2px solid black;\r\n    border-radius: 25px;\r\n    font-size: 16px;\r\n    font-weight: 500;\r\n  }\r\n\r\n  input[type=submit]{\r\n    height: 40px;\r\n    cursor: pointer;\r\n    margin-bottom: 10px;\r\n    background-color: #53a3e3;\r\n    border-radius: 20px;\r\n    font-size: 15px;\r\n    font-weight: 500;\r\n    color:white;\r\n  }\r\n\r\n  button {\r\n    all:unset;\r\n    width: 400px;\r\n    height: 40px;\r\n    margin: 0px auto;\r\n    border-radius: 25px;\r\n    border: none;\r\n    color: white;\r\n    background-color: #e04e36;\r\n    cursor: pointer;\r\n    font-size: 15px;\r\n    font-weight: 500;\r\n  }\r\n`\r\n\r\n\r\nconst Tweet = ({ tweetObj, isOwner }) => {\r\n  const [editing, setEditing] = useState(false);\r\n  const [newTweet, setNewTweet] = useState(tweetObj.text);\r\n  console.log(tweetObj);\r\n\r\n  const onDeleteClick = () => {\r\n    const ok = window.confirm(\"Are you sure you want to Delete this Tweet?\");\r\n    if (ok) {\r\n      // delete tweet\r\n      // tweetObj에는 tweets 어레이가 있고 이 어레이 안에는 doc.id가 있다\r\n      // dbService.doc(`tweets/${tweetObj.id}`).delete();\r\n      // fireStore의 해당 문서 삭제 \r\n      dbService.collection(\"tweets\").doc(`${tweetObj.id}`).delete();\r\n      // storage의 파일 삭제 \r\n      storageService.refFromURL(tweetObj.fileUrl).delete();\r\n    }\r\n  };\r\n\r\n  const toggleEditing = () => setEditing((prev) => !prev);\r\n\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewTweet(value);\r\n  };\r\n\r\n  const onSubmit = (event) => {\r\n    event.preventDefault();\r\n    dbService\r\n      .collection(\"tweets\")\r\n      .doc(`${tweetObj.id}`)\r\n      .update({ text: newTweet });\r\n    setEditing(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {editing ? (\r\n        <>\r\n          {isOwner && (\r\n            <EditContainer>\r\n              <form onSubmit={onSubmit}>\r\n                <input\r\n                  type=\"text\"\r\n                  value={newTweet}\r\n                  placeholder=\"Edit Your Tweet\"\r\n                  onChange={onChange}\r\n                  required\r\n                />\r\n                <input type=\"submit\" value=\"Update Tweet\" />\r\n              </form>\r\n              <button onClick={toggleEditing}>Cancel</button>\r\n            </EditContainer>\r\n          )}\r\n        </>\r\n      ) : (\r\n        <Container>\r\n          <h4>\r\n            {tweetObj.text}\r\n          </h4>\r\n          {tweetObj.fileUrl && <img src={tweetObj.fileUrl} alt=\"attached file\" />}\r\n          {isOwner && (\r\n            <BtnContainer>\r\n              <BtnTrash onClick={onDeleteClick}>🗑️</BtnTrash>\r\n              <BtnEdit onClick={toggleEditing}>✏️</BtnEdit>\r\n            </BtnContainer>\r\n          )}\r\n        </Container>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Tweet;\r\n","import React, {useState} from 'react';\r\nimport {dbService, storageService} from 'fbase';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport styled from 'styled-components';\r\n\r\n\r\nconst Form = styled.form`\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-bottom: 80px;\r\n    position: relative;\r\n    left:0;\r\n    top: 0;\r\n\r\n    input[type=text] {\r\n        width: 450px;\r\n        height: 40px;\r\n        text-indent: 10px;\r\n        border-radius: 20px;\r\n        margin-bottom: 20px;\r\n        border: none;\r\n    }\r\n    input[type=submit]{\r\n        all: unset;\r\n        position:absolute;\r\n        right: 0px;\r\n        width: 40px;\r\n        height: 40px;       \r\n        background-color: #1d9bf0;\r\n        border-radius: 50%;\r\n        cursor: pointer;\r\n        text-align: center;\r\n        font-size: 20px;\r\n    }\r\n    label {\r\n        width: 100%;\r\n        text-align: center;\r\n        color: #1d9bf0;\r\n        text-decoration: underline;\r\n        font-size: 14px;\r\n    }\r\n    input[type=file]{\r\n        position: absolute;\r\n        width: 1px;\r\n        height: 1px;\r\n        padding: 0px;\r\n        margin: -1px; \r\n        overflow: hidden;\r\n        clip:rect(0,0,0,0); \r\n        border: 0;\r\n    }\r\n`\r\n\r\nconst ImagePreview = styled.div`\r\n    width: 100%;\r\n    text-align: center;\r\n    margin-top: 50px;\r\n    display:flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n\r\n    img{\r\n        width: 100px;\r\n        height: 100px;\r\n        margin-bottom: 10px;\r\n    }\r\n    button{\r\n        all: unset;\r\n        width: 100px;\r\n        height: 20px;\r\n        cursor: pointer;\r\n        text-decoration: underline;\r\n        color: red;\r\n    }\r\n`\r\n\r\nconst TweetFactory = ({userObj}) => {\r\n    const [tweet, setTweet] = useState(\"\");\r\n    const [file, setFile] = useState(\"\");\r\n\r\n    const onSubmit = async (event)=>{\r\n        event.preventDefault();\r\n        let fileUrl = \"\";\r\n\r\n        if(file !== \"\") {\r\n            // 사진이 있으면 업로드\r\n            // 사진의 url을 받아서 URL을 tweet에 추가한다\r\n            // 1. make child : file에 대한 reference 생성 return ReferenceCompat\r\n            // child(이미지의 path)\r\n            const fileRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`);\r\n            console.log(fileRef)\r\n            // 2. send data to storage ( return UploadTaskSnapshot )\r\n            const response = await fileRef.putString(file, \"data_url\");\r\n            console.log(response)\r\n            // 3. get download Url from response \r\n            fileUrl = await response.ref.getDownloadURL();\r\n        }\r\n            const tweetObj = {\r\n                text : tweet,\r\n                createdAt: Date.now(),\r\n                creatorId: userObj.uid,\r\n                fileUrl: fileUrl\r\n            }\r\n            // 4. create collection in firestore \r\n            await dbService.collection(\"tweets\").add(tweetObj);\r\n            setTweet(\"\"); \r\n            setFile(\"\");\r\n    }\r\n\r\n    const onChange = (event) => {\r\n        const {target : {value}} = event;\r\n        setTweet(value);\r\n    }\r\n\r\n    const onFileChange = (event) => {\r\n        const {target : { files }}= event;\r\n        // input의 모든 파일 중 첫번째 파일만 받는다 \r\n        const theFile = files[0];\r\n\r\n        // 1. create reader using fileReader API \r\n        const reader = new FileReader();\r\n        // 2. add eventlister to reader (when loadingEnd get result and setFile(result) )\r\n        reader.onloadend = (finishedevent) => {\r\n            const {currentTarget : {result}}= finishedevent;\r\n            console.log(result);\r\n            setFile(result);\r\n        }\r\n        // 3. start to read as DataURL ( 문자열로 변환 ) \r\n            reader.readAsDataURL(theFile);\r\n    }\r\n\r\n        const onClearFile = ()=>{\r\n            setFile(\"\");\r\n        }\r\n\r\n    return(\r\n        <>\r\n            <Form onSubmit={onSubmit}>\r\n                <input type=\"text\" placeholder=\"What's on Your Mind?\" maxLength=\"120\" value={tweet} onChange={onChange}/>\r\n                <label htmlFor=\"ex_file\">Add Photos +</label> \r\n                <input type=\"file\" id=\"ex_file\"  accept=\"image/*\" onChange={onFileChange}/>\r\n                <input type=\"submit\" value=\"➜\" />\r\n                {file && \r\n                    <ImagePreview>\r\n                        <img src={file} alt=\"Attached\" />\r\n                        <button onClick={onClearFile}>Clear</button>\r\n                    </ImagePreview>}\r\n            </Form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TweetFactory;","import React, {useState, useEffect} from 'react';\r\nimport {dbService} from 'fbase';\r\nimport Tweet from 'components/Tweet';\r\nimport TweetFactory from \"components/TweetFactory\";\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    height : calc( 100vh - 50px );\r\n    padding-top: 100px;\r\n`\r\n\r\nconst Content = styled.div`\r\n    position: absolute;\r\n    left: 50%;\r\n    transform: translateX(-50%);\r\n`\r\n\r\nconst LogoContainer = styled.div`\r\n    width: 100%;\r\n    text-align: center;\r\n    margin-bottom: 40px;\r\n`\r\nconst Logo = styled.img`\r\n    width: 50px;\r\n    height: 50px;\r\n`\r\n\r\nconst TweetList = styled.div`\r\n    width: 450px;\r\n    text-align: center;\r\n    position: relative;\r\n`\r\n\r\n\r\n\r\n\r\nconst Home = ({userObj})=> {\r\n    const [tweets, setTweets] = useState([]);\r\n    \r\n    useEffect(()=>{\r\n        // getTweets();\r\n        // Ver 2. 실시간  onSnapshot 데이터베이스에 무슨일이 있을 때 알림을 받음 \r\n        dbService.collection(\"tweets\").onSnapshot(snapshot => {\r\n            //console.log(snapshot.docs)\r\n            const tweetsArray= snapshot.docs.map(doc => ({\r\n                id: doc.id,\r\n                ...doc.data()\r\n            })\r\n            );\r\n            console.log(tweetsArray)\r\n            setTweets(tweetsArray)\r\n        })\r\n    },[])\r\n\r\n    return(\r\n        <Container>\r\n            <Content>\r\n                <LogoContainer>\r\n                    <Logo src={require(\"assets/twitterLogo.png\").default} alt=\"logo\" />\r\n                </LogoContainer>\r\n                <TweetFactory userObj={userObj} /> \r\n                <TweetList>\r\n                    {tweets.map((item) => <Tweet key={item.id} tweetObj={item} isOwner={item.creatorId === userObj.uid}/>)}\r\n                </TweetList>\r\n            </Content>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Home; \r\n\r\nHome.propTypes = {\r\n    tweets : PropTypes.array\r\n}","import React,{useState} from 'react';\r\nimport {authService} from 'fbase';\r\nimport styled from \"styled-components\";\r\n\r\n\r\nconst FormContainer = styled.div`\r\n    display:flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    \r\n`\r\n\r\nconst Logo = styled.img`\r\n    width: 50px;\r\n    height: 50px;\r\n    margin-bottom: 50px;\r\n`\r\n\r\nconst Form = styled.form`\r\n    display: flex;\r\n    flex-direction: column;\r\n    input {\r\n        width: 450px;\r\n        height: 40px;\r\n        text-indent: 10px;\r\n        border-radius: 15px;\r\n        margin-bottom: 20px;\r\n        border: none;\r\n    }\r\n    input[type=submit] {\r\n        color: white;\r\n        background-color: rgb(29,155,240);\r\n        cursor: pointer;\r\n    }\r\n`\r\n\r\nconst ErrorMessage = styled.div`\r\n    text-align: center;\r\n    margin-bottom: 20px;\r\n    color: #e74c3c;\r\n`\r\n\r\n\r\nconst SwithBtn = styled.span`\r\n    display:block;\r\n    text-decoration: underline;\r\n    margin-bottom: 50px;\r\n    cursor: pointer;\r\n    color: rgb(29,155,240);\r\n`\r\n\r\nconst AuthForm = () => {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [newAccount, setNewAccount] = useState(true);\r\n    const [error, setError] = useState(\"\");\r\n\r\n    const onChange = (event) => {\r\n        // event.target.name = input has name attribute \r\n        const { target : { name, value}} = event;\r\n        if (name === \"email\") {\r\n            setEmail(value)\r\n        } else if (name === \"password\") {\r\n            setPassword(value)\r\n        }\r\n    }\r\n    \r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        // firebase로 create, login\r\n        try{\r\n            let data;\r\n            if(newAccount === true) {\r\n                data = await authService.createUserWithEmailAndPassword(email, password)\r\n            } else if(newAccount === false) {\r\n                data = await authService.signInWithEmailAndPassword(email, password)\r\n                console.log(data)\r\n            }\r\n        } catch(error) {\r\n            setError(error.message)\r\n        }\r\n    }\r\n\r\n   \r\n\r\n    const toggleAccount = () =>{\r\n        // 이전에 갖고있던 값의 반대를 적용시킨다 \r\n        setNewAccount(prev => !prev);\r\n    }\r\n\r\n    return(\r\n    \r\n        <FormContainer>\r\n            <Logo src={require(\"assets/twitterLogo.png\").default} alt=\"logo\" />\r\n            <Form onSubmit={onSubmit}>\r\n                <input name=\"email\" type=\"email\" placeholder=\"Email\" required value={email} onChange={onChange}/>\r\n                <input name=\"password\" type=\"password\" placeholder=\"Password (6 characters minimun)\" minLength=\"6\" required value={password} onChange={onChange} autoComplete=\"true\" />\r\n                <input type=\"submit\" value={newAccount ? \"Create Account\" : \"Sign In\"} />\r\n                <ErrorMessage>{error}</ErrorMessage>\r\n            </Form>\r\n            <SwithBtn onClick={toggleAccount}>{newAccount ? \"Sign In\" : \"Create Account\" }</SwithBtn>\r\n        </FormContainer>\r\n     \r\n    )\r\n}\r\n\r\nexport default AuthForm; ","import React from 'react';\r\nimport {authService , firebaseInstance} from \"fbase\";\r\nimport AuthForm from \"components/AuthForm\";\r\nimport styled from \"styled-components\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faGoogle, faGithub } from \"@fortawesome/free-brands-svg-icons\";\r\n\r\nconst Container = styled.div`\r\n    height:100vh;\r\n    display: flex;\r\n    justify-content:center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n`\r\n\r\nconst SocialLogin = styled.div`\r\n    button {\r\n        width: 225px;\r\n        height: 50px;\r\n        margin-right: 10px;\r\n        cursor: pointer;\r\n        border-radius: 25px;\r\n    }\r\n`\r\n\r\nconst Auth = ()=> {\r\n    const onSocialClick = async (event) => {\r\n        event.preventDefault();\r\n        const {target: {name}} = event;\r\n\r\n        let provider; \r\n        if(name === \"google\"){\r\n            //google provider\r\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n        } else if (name === \"github\") {\r\n            //github provider \r\n            provider = new firebaseInstance.auth.GithubAuthProvider();\r\n        }\r\n        //sign In with popup\r\n        const data = await authService.signInWithPopup(provider)\r\n        console.log(data)\r\n    }\r\n\r\n    return(\r\n        <Container>\r\n            <AuthForm />\r\n            <SocialLogin>\r\n                <button name=\"google\" onClick={onSocialClick}>Continue with Google <FontAwesomeIcon icon={faGoogle} /></button> \r\n                <button name=\"github\" onClick={onSocialClick}>Continue with Github <FontAwesomeIcon icon={faGithub} /></button> \r\n            </SocialLogin>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Auth;","import React, {useEffect,useState} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport {authService, dbService} from \"fbase\";\r\nimport styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    padding-top:100px;\r\n    text-align:center;\r\n`\r\n\r\nconst Form = styled.form`\r\n    width: 450px;\r\n    flex-direction: column;\r\n    margin: 0px auto;\r\n\r\n    input{\r\n        all: unset;\r\n        width: 100%;\r\n        height: 50px;\r\n        border-radius: 25px;\r\n        margin-bottom: 20px;\r\n    }\r\n\r\n    input[type=text]{\r\n        background-color:white;\r\n        color:black;\r\n        font-size: 20px;\r\n        font-weight: 600;\r\n    }\r\n    input[type=submit]{\r\n        background-color: #53a3e3;\r\n        font-size: 15px;\r\n        font-weight: 500;\r\n        cursor: pointer;\r\n    }\r\n\r\n`\r\n\r\nconst LogoutBtn = styled.button`\r\n    all: unset;\r\n    width: 450px;\r\n    height: 50px;\r\n    background-color: tomato;\r\n    border-radius: 25px;\r\n    font-size: 15px;\r\n    font-weight: 500;\r\n    cursor: pointer;\r\n    margin-bottom: 50px;\r\n`\r\n\r\nconst History = styled.div`\r\n    width: 100%;\r\n    h3{\r\n        font-size: 20px;\r\n        padding: 10px 0px;\r\n        position: relative;\r\n        margin-bottom: 50px;\r\n    }\r\n    h3::before{\r\n        content:\"\";\r\n        width: 185px;\r\n        border-bottom: 2px solid white;\r\n        position: absolute;\r\n        top: 50px;\r\n    }\r\n    ul{\r\n        width: 450px;\r\n        margin: 0px auto;\r\n    }\r\n    li{\r\n        width: 100%;\r\n        height: 100px;\r\n        background-color: #ecf0f1;\r\n        margin-bottom: 20px;\r\n        border-radius: 10px;\r\n        position: relative;\r\n        overflow: hidden;\r\n    }\r\n    p {\r\n        font: normal 25px/100px \"Times New Roman\";\r\n        color: black;\r\n    }\r\n`\r\n\r\n\r\n\r\nconst Profile = ({userObj, refreshUser})=>{\r\n    const [myTweets, setMyTweets] = useState([]);\r\n    const [displayName, setDisplayName] = useState(userObj.displayName);\r\n\r\n    const history = useHistory();\r\n\r\n    const onLogOut = ()=>{\r\n        authService.signOut();\r\n        history.push(\"/\");\r\n    }\r\n\r\n    const getMyTweet = async () =>{\r\n        // get filtered tweet (my tweet)\r\n        const tweets = await dbService.collection(\"tweets\").where(\"creatorId\", \"==\", userObj.uid).get();\r\n        const mySaying = tweets.docs.map((doc) =>  doc.data());\r\n        setMyTweets(mySaying);\r\n    }\r\n\r\n    useEffect(()=>{\r\n        // 내 tweet을 얻는 function 호출 \r\n        getMyTweet();\r\n    },[])\r\n\r\n    const onChange = (event) => {\r\n        const {target : {value}}= event;\r\n        setDisplayName(value);\r\n    }\r\n\r\n    const onSubmit = async (event) =>{\r\n        event.preventDefault();\r\n        // update displayName in firestore\r\n        if(userObj.displayName !== displayName) {\r\n            console.log(userObj.updateProfile)\r\n            await userObj.updateProfile({displayName: displayName})\r\n        }\r\n        refreshUser();\r\n    }\r\n    \r\n    return(\r\n        <Container>\r\n            <Form onSubmit={onSubmit}>\r\n                <input type=\"text\" placeholder=\"Displayname\" value={displayName} onChange={onChange}/>\r\n                <input type=\"submit\" value=\"Update Profile\" />\r\n            </Form>\r\n            <LogoutBtn onClick={onLogOut}>Log out</LogoutBtn>\r\n            {myTweets.length > 0 && \r\n                <History>\r\n                    <h3>My History of Tweets</h3>\r\n                    <ul>\r\n                        {myTweets.map((item, index)=> <li key={index}><p>{item.text}</p></li>)}\r\n                    </ul>\r\n                </History>\r\n            }\r\n            \r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport {Link,withRouter } from 'react-router-dom';\r\nimport styled from \"styled-components\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {faHome, faUser} from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst NavigationBar = styled.div`\r\n    width: 100%;\r\n    height: 50px;\r\n    background-color: black;\r\n`\r\n\r\nconst NavUl = styled.ul`\r\n    width: 100%;\r\n    height: 100%;\r\n    display:flex;\r\n`\r\n\r\nconst NavLi = styled.li`\r\n    width: 50%;\r\n    height: 100%;\r\n    border-bottom: 1px solid ${props => props.current ? \"#1d9bf0\" : \"transparent\"};\r\n`\r\n\r\nconst Slink = styled(Link)`\r\n    display:block;\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n`\r\n\r\n\r\n\r\n\r\n\r\nconst Navigation = ({userObj, location})=>{\r\n    const {pathname} = location;\r\n    return(\r\n        <NavigationBar>\r\n            <NavUl>\r\n                <NavLi current={pathname === \"/\"}><Slink to=\"/\"><FontAwesomeIcon icon={faHome} size=\"lg\" pull=\"left\" /> Home </Slink></NavLi>\r\n                <NavLi current={pathname === \"/profile\"}><Slink to=\"/profile\"> <FontAwesomeIcon icon={faUser} size=\"lg\" pull=\"left\" /> {userObj && userObj.displayName}'s Profile</Slink></NavLi>\r\n            </NavUl>\r\n        </NavigationBar>\r\n    )\r\n}\r\n\r\n\r\nexport default withRouter(Navigation);","import React from \"react\";\r\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Home from \"routes/Home\";\r\nimport Auth from \"routes/Auth\";\r\nimport Profile from \"routes/Profile\";\r\nimport Navigation from \"components/Navigation\";\r\n\r\nconst MainRouter = ({isLoggedIn, userObj, refreshUser}) => {\r\n  return (\r\n    <Router>\r\n        {isLoggedIn && <Navigation userObj={userObj}/> }\r\n    <Switch>\r\n        {isLoggedIn ? (\r\n            <>\r\n                <Route exact path=\"/\">\r\n                    <Home userObj={userObj} />\r\n                </Route>\r\n                <Route exact path=\"/profile\">\r\n                    <Profile userObj={userObj} refreshUser={refreshUser} />\r\n                </Route>\r\n            </>\r\n        ) : (\r\n            <>\r\n                <Route exact path=\"/\">\r\n                    <Auth />\r\n                </Route>\r\n            </>\r\n        )}\r\n    </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default MainRouter;","import {createGlobalStyle} from 'styled-components';\r\nimport reset from 'styled-reset';\r\n\r\nconst globalStyle = createGlobalStyle`\r\n    ${reset}\r\n    a {\r\n        text-decoration: none;\r\n        color: inherit;\r\n    }\r\n    \r\n    * {\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    body {\r\n        width:100%;\r\n        height: 100vh;\r\n        font-family: --apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\r\n        font-size: 12px;\r\n        background-color: rgba(20,20,20,1);\r\n        color:white;\r\n    }\r\n`\r\n\r\nexport default globalStyle;","import React, { useEffect, useState } from \"react\";\nimport MainRouter from \"components/Router\";\nimport { authService } from \"fbase\";\nimport PropTypes from 'prop-types';\nimport GlobalStyle from 'components/GlobalStyle';\n\nfunction App() {\n  // 기본적으로 로그인 안된 상태\n  const [init, setInit] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n  //console.log(isLoggedIn); // null 인 이뉴는 firebase가 초기화되고 모든걸 로드할떄까지 기다려줄 시간이 없기때문\n\n  //  onAuthStateChanged는 state의 변화를 듣고 있다 \n  useEffect(()=>{\n    authService.onAuthStateChanged((user)=>{\n      if(user) {\n        setIsLoggedIn(true); \n        // setUserObj(user)\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile : (args)=> user.updateProfile(args) \n        })\n      } else {\n        setIsLoggedIn(false)\n      }\n      setInit(true);\n    })\n  },[])\n\n  const refreshUser = () =>{\n    const user = authService.currentUser;\n    setUserObj({\n        displayName: user.displayName,\n        uid: user.uid,\n        updateProfile : (args)=> user.updateProfile(args) \n    });\n  }\n\n  return (\n    <>\n      <GlobalStyle />\n      {init ? <MainRouter isLoggedIn={isLoggedIn} userObj={userObj} refreshUser={refreshUser} /> : \"Initializing...\" }\n    </>\n  );\n}\n\nexport default App;\n\n\nApp.propTypes = {\n  init : PropTypes.bool,\n  isLoggedIn : PropTypes.bool,\n  userObj: PropTypes.object\n} ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}